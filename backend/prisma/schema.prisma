generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(cuid())
  name     String
  reg_no   String @unique
  role     Role   @default(VISITOR)
  password String

  // Relations as creator
  events_created Event[] @relation("EventCreator")
  
  // Relations as club member
  clubs_as_president Club[] @relation("President")
  clubs_as_vice_president Club[] @relation("VicePresident") 
  clubs_as_faculty_coordinator Club[] @relation("FacultyCoordinator")
  
  // Relations as participant/volunteer
  participations Event[] @relation("EventParticipants")
  volunteer_events Event[] @relation("EventVolunteers")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("users")
}

model Club {
  id          String @id @default(cuid())
  name        String @unique
  type        String
  description String?
  
  // President relation
  president User @relation("President", fields: [president_id], references: [id], onDelete: Restrict)
  president_id String @unique
  
  // Vice President relation
  vice_president User @relation("VicePresident", fields: [vice_president_id], references: [id], onDelete: Restrict)
  vice_president_id String @unique
  
  // Faculty Coordinator relation
  faculty_coordinator User @relation("FacultyCoordinator", fields: [faculty_coordinator_id], references: [id], onDelete: Restrict)
  faculty_coordinator_id String @unique
  
  budget      Float?
  logo        String?
  members     Int    @default(0)

  // Relations
  events Event[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("clubs")
}

model Event {
  id            String   @id @default(cuid())
  name          String
  type          String
  
  // Club relation
  event_owner Club @relation(fields: [event_owner_id], references: [id], onDelete: Cascade)
  event_owner_id String
  
  venue         String
  description   String?
  date          DateTime
  time          String
  equipments    Json?
  participants  Json?
  volunteers    Json?
  event_managers Json?
  revenue_generated Float?

  // Creator relation
  creator User @relation("EventCreator", fields: [creator_id], references: [id], onDelete: Restrict)
  creator_id String
  
  // Many-to-many relations
  participants_list User[] @relation("EventParticipants")
  volunteers_list   User[] @relation("EventVolunteers")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("events")
}

enum Role {
  VISITOR
  FACULTY
  ADMIN
}